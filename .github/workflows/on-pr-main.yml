name: PR

on:
  pull_request:
    branches: [main]

concurrency:
  # PR open and close use the same group, allowing only one at a time
  group: pr-${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  extract_version:
    name: Extract Version
    if: (!github.event.pull_request.head.repo.fork)
    runs-on: ubuntu-24.04
    outputs:
      app_version: ${{ steps.read_yaml.outputs.app_version }}
      available: ${{ steps.read_yaml.outputs.available }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Extract Version
        id: read_yaml
        shell: bash
        run: |
          appVersion=$(yq '.metabase.metabaseImage.tag' charts/nr-metabase/values.yaml)
          echo "app version is $appVersion"
          echo "app_version=$appVersion" >> "$GITHUB_OUTPUT"
          if [ -z "$appVersion" ]; then
            echo "Version is empty, marking as false"
            echo "available=false" >> $GITHUB_OUTPUT
          else
            echo "Version exists ($appVersion), marking as true"
            echo "available=true" >> $GITHUB_OUTPUT
          fi

      - name: Get App Version
        run: echo "${{ steps.read_yaml.outputs.app_version }}"

  builds:
    name: Builds
    needs: extract_version
    if: (needs.extract_version.outputs.available == 'true')
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      attestations: write
      packages: write
    steps:
      - uses: bcgov/action-builder-ghcr@1a3767a04ade69edf7e4857c44269d1100282581 # v4.1.0
        with:
          package: metabase
          tags: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          build_args: |
            METABASE_VERSION=${{ needs.extract_version.outputs.app_version }}
      - uses: shrink/actions-docker-registry-tag@f04afd0559f66b288586792eb150f45136a927fa # v4
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/metabase
          target: ${{ github.sha }}
          tags: |
            ${{ github.event.number }}

  deploys:
    name: Deploys
    needs: [builds]
    runs-on: ubuntu-24.04
    steps:
      - name: Deploy to OpenShift
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
        env:
          DB_HOST_PORT: ${{ secrets.DB_HOST_PORT_ENV }}
        with:
          oc_namespace: ${{ vars.OC_NAMESPACE }}
          oc_token: ${{ secrets.OC_TOKEN }}
          oc_server: ${{ vars.OC_SERVER }}
          commands: |
            # Deploy Helm Chart
            helm upgrade --install --wait --atomic nr-metabase-${{ github.event.number }} \
              --set-literal metabase.dbHostPortEnv="${DB_HOST_PORT}" \
              --set-string global.secrets.databasePassword="${{ secrets.DB_PASSWORD}}" \
              --set-string global.zone="${{ github.event.number }}" \
              --set-string metabase.metabaseImage.tag="${{ github.sha }}" \
              --set-string namespace="${{ vars.oc_namespace }}" \
              --timeout 5m charts/nr-metabase --debug
